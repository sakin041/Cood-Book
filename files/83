#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
struct job
{
	char id;
	int dead;
	int profit;
};
bool comparison(job a, job b)
{
	return a.profit > b.profit;
}
void jobSecheduling(job jobList[], int n)
{
	sort(jobList, jobList + n, comparison);
	vector<bool>isFree(100, true);
	int counter = 0;
	char timeSlot[100];
	int dmax = 0;  //String the largest deadline
	int profit = 0;

	for (int i = 0; i < n; i++)
	{
		if (jobList[i].dead > dmax)
			dmax = jobList[i].dead;
	}
	cout << "Maximum deadline " << dmax << endl;
	//Computing the maximum profit within the deadline
	for (int i = 0; i < n; i++)
	{
		int deadline = jobList[i].dead;
		while (deadline >= 1)
		{
			if (isFree[deadline])
			{
				isFree[deadline] = false;
				counter++;
				profit += jobList[i].profit;
				timeSlot[deadline] = jobList[i].id;
				break;
			}
			deadline--;
		}
		// If all the time slots are filled then stop
		if (counter == dmax)
			break;
	}
	cout << "Total profit " << profit << endl;
	cout << "Required jobs" << endl;
	for (int i = 1; i <= dmax; i++)
	{
		if (isFree[i] != -1)
			cout << timeSlot[i]<< " ";
	}

}

int main()
{
	job jobList[] = { { 'a',2,100 } ,{ 'b',1,19 },{ 'c',2,27 },{ 'd',1,25 },{ 'e',3,15 } };
	int size = sizeof(jobList) / sizeof(jobList[0]);
	jobSecheduling(jobList, size);
	return 0;
}
