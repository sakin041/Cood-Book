#include<stdio.h>
#include<list>
#include<vector>
#include<queue>
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int vertex,edge,cost=0;
typedef pair<int , int> pr;
list < pr > *adj = new list < pr > [100];
priority_queue < pr, vector < pr >, greater < pr > > pq;
vector <int> key(100,INT_MAX);
vector <int> par(100,-1);
vector <int> mst(100,false);

void prim(int source)
{
    key[source] = 0;
    pq.push( pr(key[source], source) );
    while(!pq.empty())
    {
        int u_key = pq.top().first;
        int u = pq.top().second;
        pq.pop();
        if(mst[u])
            continue;
        mst[u] = true;
        cost += u_key;
        list <pr> :: iterator i;
        for(i=adj[u].begin(); i!=adj[u].end(); i++)
        {
            int w =i->first;
            int v =i->second;
            if(mst[v])
                continue;
            if(key[v] > w)
            {
                key[v] = w;
                par[v] = u;
                pq.push( pr( key[v],v ) );
            }
        }
    }
}

int main()
{
    freopen("prim.txt","r",stdin);
    cin >> vertex >> edge;
    int u,v,w;
    for(int i=0; i<edge; i++)
    {
        cin >> u >> v >> w;
        adj[u].push_back( pr(w,v) );
        adj[v].push_back( pr(w,u) );
    }
    prim(7);
    cout << cost << endl;
    for(int i=0; i<vertex;i++)
        cout << i << " " << par[i] << " : " << key[i] << endl;
    return 0;
}
