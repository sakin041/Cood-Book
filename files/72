#include <bits/stdc++.h>
#define maxm 1000
using namespace std;

struct edge
{
    int src,des,weight;
};

vector <edge> ev;
vector <int> dis(maxm,9999);
vector <int> par(maxm,-1);
char name[] = {'s','t','x','y','z'};
int n;
int vertex,edges;

void print()
{
    for(int i=0; i<vertex; i++)
        cout << dis[i] << " ";
    cout << "\t" ;
    for(int i=0; i<vertex; i++)
    {
        if(par[i] != -1)
            cout << name[par[i]] << " ";
        else
            cout << par[i] << " ";
    }
    cout << endl;
}

bool bellman(int src)
{
    dis[src] = 0;
    for(int i=0; i<vertex-1; i++)
    {
        for(int j=0; j<edges; j++)
        {
            int u = ev[j].src;
            int v = ev[j].des;
            int w = ev[j].weight;
            if(dis[v] > dis[u]+w){
                dis[v] = dis[u]+w;
                par[v] = u;
            }
        }
        print();
    }
    for(int j=0; j<edges; j++)
    {
        int u = ev[j].src;
        int v = ev[j].des;
        int w = ev[j].weight;
        if(dis[v] > dis[u]+w)
        {
            dis[v] = dis[u]+w;
            cout << "negative edge cycle found." << endl;
            return false;
        }
    }
    return true;
}

int main()
{
    int u,v,w;
    freopen("bellman.txt","r",stdin);
    cin >> vertex >> edges;
    for(int i=0; i<edges; i++)
    {
        cin >> u >> v >> w;
        struct edge e;
        e.src = u;
        e.des = v;
        e.weight = w;
        ev.push_back(e);
    }
    if(bellman(0) == true)
        print();
    return 0;
}
